<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-09-17T11:02:07+02:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">NeuroMath</title><subtitle>A blog about Mathematics and Neural Networks.
</subtitle><author><name>Davide Evangelista</name></author><entry><title type="html">Linear Systems with Numpy and Scipy</title><link href="http://localhost:4000/jekyll/update/2022/09/16/linear_systems.html" rel="alternate" type="text/html" title="Linear Systems with Numpy and Scipy" /><published>2022-09-16T17:00:00+02:00</published><updated>2022-09-16T17:00:00+02:00</updated><id>http://localhost:4000/jekyll/update/2022/09/16/linear_systems</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2022/09/16/linear_systems.html"><![CDATA[<p>In the following we want to understand how to use <code class="language-plaintext highlighter-rouge">numpy</code> and <code class="language-plaintext highlighter-rouge">scipy</code> to solve Linear Systems with Python.</p>

<p>To fix the notation, given a matrix $A \in \mathbb{R}^{n \times n}$ and a vector $y \in \mathbb{R}^n$, <em>solving</em> a linear system means finding (when exists) a vector $x \in \mathbb{R}^n$ such that it solves</p>

\[Ax = y\]

<p>This is not hard to do in <code class="language-plaintext highlighter-rouge">numpy</code>, since it implements a function <code class="language-plaintext highlighter-rouge">np.linalg.solve</code>, taking as input a 2-dimensional array <code class="language-plaintext highlighter-rouge">A</code> and a 1-dimensional array <code class="language-plaintext highlighter-rouge">y</code>, and returns the solution <code class="language-plaintext highlighter-rouge">x</code> to the linear system. In particular:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Generates the problem
A = np.array([[1, 1, 1], [2, 1, 2], [0, 0, 1]])
y = np.array([0, 1, 0])

# Solve the system
x_sol = np.linalg.solve(A, y)
print(f"The solution is {x_sol}.")
</code></pre></div></div>

<h2 id="testing-the-accuracy">Testing the accuracy</h2>
<p>You already studied that, when the matrix $A$ is ill-conditioned, the solution of a linear system won’t be correct, since the small perturbations on $y$ introduced by the floating point system will be amplified and the corresponding solution will be drammatically distant to the true solution.</p>

<h2 id="homework">Homework</h2>
<p>Please refer to the <a href="/_download/homework1.pdf">Homework PDF</a>.</p>]]></content><author><name>Davide Evangelista</name></author><category term="jekyll" /><category term="update" /><category term="featured" /><summary type="html"><![CDATA[In the following we want to understand how to use numpy and scipy to solve Linear Systems with Python.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/data_science.jpg" /><media:content medium="image" url="http://localhost:4000/assets/images/data_science.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Introduction to Python for Numerical Linear Algebra</title><link href="http://localhost:4000/jekyll/update/2022/09/16/introduction_to_python_numpy.html" rel="alternate" type="text/html" title="Introduction to Python for Numerical Linear Algebra" /><published>2022-09-16T08:00:00+02:00</published><updated>2022-09-16T08:00:00+02:00</updated><id>http://localhost:4000/jekyll/update/2022/09/16/introduction_to_python_numpy</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2022/09/16/introduction_to_python_numpy.html"><![CDATA[<!-- for pyscript -->
<link rel="stylesheet" href="https://pyscript.net/latest/pyscript.css" />

<script defer="" src="https://pyscript.net/latest/pyscript.js"></script>

<py-env>
- matplotlib
- numpy
</py-env>

<p>Numerical Linear Algebra (NLA) is the study of how matrix operations can be used to create computer algorithms which efficiently and accurately provide approximate answers to questions in continuous mathematics.</p>

<p>Consequently, it is mandatory to be able to efficiently implement matrix operations, i.e. operations regarding matrices (that we will represent with uppercase letters $A, B, \dots$) and vectors (that we will represent with lowercase letters $v, w, \dots$). The main library in Python implementing all the main NLA operations is <code class="language-plaintext highlighter-rouge">numpy</code>.</p>

<p>In this course, we will make massive use of <code class="language-plaintext highlighter-rouge">numpy</code>, together with its add-ons libraries, such as <code class="language-plaintext highlighter-rouge">scipy</code> and <code class="language-plaintext highlighter-rouge">pandas</code>.</p>

<p><code class="language-plaintext highlighter-rouge">numpy</code> can be imported into Python by typing</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import numpy as np
</code></pre></div></div>

<p>at the beginning of your code. If <code class="language-plaintext highlighter-rouge">numpy</code> is not installed on your Python environment, please follow <a href="https://numpy.org">numpy.org</a> for informations on how to install it.</p>

<h3 id="documentation">Documentation</h3>
<p>At <a href="https://numpy.org">numpy.org</a> it is possible to find a complete documentation of all the <code class="language-plaintext highlighter-rouge">numpy</code> functions with application examples.</p>

<h2 id="numpy-and-numpy-arrays">Numpy and Numpy-Arrays</h2>

<h3 id="creating-a-numpy-array">Creating a Numpy array</h3>

<p>The basic object of <code class="language-plaintext highlighter-rouge">numpy</code> is the so-called <code class="language-plaintext highlighter-rouge">ndarray</code>, which defines the concept of vectors, matrices, tensors, …
The simplest way to create a numpy array is to cast it from a Python <code class="language-plaintext highlighter-rouge">list</code> or <code class="language-plaintext highlighter-rouge">tuple</code>. This can be simply done as</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a = [1, 2, 3]
a_vec = np.array(a)
</code></pre></div></div>

<p>producing a <code class="language-plaintext highlighter-rouge">numpy</code> array, <code class="language-plaintext highlighter-rouge">a_vec</code>. This can be checked by running the command</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>print(type(a_vec))
</code></pre></div></div>
<p>A basic propriety of a numpy array is the <code class="language-plaintext highlighter-rouge">shape</code>, representing its dimension. For example, a 5-dimensional vector $a = (1, 2, 3, 4, 5)^T$ will have shape $(5, )$, while a $3 \times 3$ matrix</p>

\[A = \begin{bmatrix}
    1 &amp; 1 &amp; -1 \\
    2 &amp; 0 &amp; 0 \\
    0 &amp; 1 &amp; 2
\end{bmatrix}\]

<p>have <code class="language-plaintext highlighter-rouge">shape</code> $(3, 3)$. A working example creating the matrix $A$ defined above and checking its dimension is</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>A = [[1, 1, -1], [2, 0, 0], [0, 1, 2]]
A = np.array(A)

print(A.shape) # Use .shape to print the shape
</code></pre></div></div>

<hr />

<h3 id="other-functions-to-create-arrays">Other functions to create arrays</h3>
<p>In real applications, we will usually make use of huge matrices and vectos, with dimension that can easily reach a couple of millions. Clearly, it is not possible to define those kind of array by manually typing them and then converting them to numpy arrays with the <code class="language-plaintext highlighter-rouge">np.array</code> function. Luckily, this can be avoided when the array we need to create has a specific pattern. We will now list some functions we can use to simply create specific high-dimensional arrays.</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">np.linspace(a, b, n)</code>: Creates a vector of length <code class="language-plaintext highlighter-rouge">n</code>, containing <code class="language-plaintext highlighter-rouge">n</code> elements uniformely distributed in the interval $[a, b]$.</li>
  <li><code class="language-plaintext highlighter-rouge">np.arange(start, end, step)</code>: Creates a vector containing all the integer numbers from <code class="language-plaintext highlighter-rouge">start</code> to <code class="language-plaintext highlighter-rouge">end-1</code>, skipping <code class="language-plaintext highlighter-rouge">step</code> numbers every time.</li>
  <li><code class="language-plaintext highlighter-rouge">np.zeros((m, n))</code>: Creates an $m \times n$ matrix full of zeros. Clearly, to create a vector instead of a matrix, simply use <code class="language-plaintext highlighter-rouge">np.zeros((m, ))</code>.</li>
  <li><code class="language-plaintext highlighter-rouge">np.ones((m, n))</code>: Creates an $m \times n$ matrix full of ones.</li>
  <li><code class="language-plaintext highlighter-rouge">np.zeros_like(a)</code>: Creates an array full of zeros of the same shape of <code class="language-plaintext highlighter-rouge">a</code>. This is equivalent to <code class="language-plaintext highlighter-rouge">np.zeros(a.shape)</code>.</li>
  <li><code class="language-plaintext highlighter-rouge">np.diag(v)</code>: Given a vector <code class="language-plaintext highlighter-rouge">v</code> of shape $(n, )$, returns an $n \times n$ diagonal matrix with <code class="language-plaintext highlighter-rouge">v</code> as diagonal.</li>
  <li><code class="language-plaintext highlighter-rouge">np.random.randn(m, n)</code>: Creates an $m \times n$ matrix of normally distributed elements (i.e. sampled from $\mathcal{N}(0, I)$).</li>
</ul>

<p>For example, if we want to create a vector of length $10$ containing all the even numbers between $0$ and $18$, we can use</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> # Create the vector
a = np.arange(0, 20, 2)

# Visualize the vector
print(a)
</code></pre></div></div>

<blockquote>
  <p><strong><em>Exercise:</em></strong> Create an visualize the following matrix: 
\(A =  \begin{bmatrix} 2 &amp; 1 &amp; 1 \\ 1 &amp; 2 &amp; 1 \\ 1 &amp; 1 &amp; 2\end{bmatrix}\)
Moreover, print its shape.</p>
</blockquote>

<py-repl></py-repl>

<hr />

<h2 id="arrays-operations">Arrays operations</h2>
<p>Now that we are able to create arrays, we need to understand how to use them. To simplify the implementation of NLA algorithms, the operations between numpy arrays basically follows the same syntax you can find in every math textbook. In particular, almost every operations is applied <em>element-wise</em>.</p>

<blockquote>
  <p>A scalar operation between $n$-dimensional arrays $a$ and $b$ is said to be element-wise if it is applied to $a$ and $b$ element by element.</p>
</blockquote>

<p>For example, if</p>

\[a = \begin{bmatrix} 1 \\ 0 \\ -1 \end{bmatrix} \qquad b = \begin{bmatrix} 0 \\ 2 \\ 2 \end{bmatrix}\]

<p>then, since</p>

\[a + b = \begin{bmatrix} 1 + 0 \\ 0 + 2 \\ -1 + 2 \end{bmatrix} = \begin{bmatrix} 1 \\ 2 \\ 1 \end{bmatrix}\]

<p>then we say that the $+$ operation is element-wise.</p>

<p>We’ll list now the most important element-wise operations between arrays in numpy. When one of the two elements of the operators is a scalar number, it is threated as an array of the correct shape, where each element is equal to the number itself. In the following, we will use <code class="language-plaintext highlighter-rouge">a</code>, <code class="language-plaintext highlighter-rouge">b</code> to indicate generic arrays (vectors, matrices, …), <code class="language-plaintext highlighter-rouge">v</code>, <code class="language-plaintext highlighter-rouge">w</code> to indicate vectors and <code class="language-plaintext highlighter-rouge">A</code>, <code class="language-plaintext highlighter-rouge">B</code> to indicate matrices.</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">a + b</code>: Returns the element-wise sum of <code class="language-plaintext highlighter-rouge">a</code> and <code class="language-plaintext highlighter-rouge">b</code>. Requires the two arrays to have the same <code class="language-plaintext highlighter-rouge">shape</code>.</li>
  <li><code class="language-plaintext highlighter-rouge">a - b</code>: Returns the element-wise difference of <code class="language-plaintext highlighter-rouge">a</code> and <code class="language-plaintext highlighter-rouge">b</code>. Requires the two arrays to have the same <code class="language-plaintext highlighter-rouge">shape</code>.</li>
  <li><code class="language-plaintext highlighter-rouge">a * b</code>: Returns the element-wise multiplication of <code class="language-plaintext highlighter-rouge">a</code> and <code class="language-plaintext highlighter-rouge">b</code>. Requires the two arrays to have the same <code class="language-plaintext highlighter-rouge">shape</code>.</li>
  <li><code class="language-plaintext highlighter-rouge">a / b</code>: Returns the element-wise division between <code class="language-plaintext highlighter-rouge">a</code> and <code class="language-plaintext highlighter-rouge">b</code>. Requires the two arrays to have the same <code class="language-plaintext highlighter-rouge">shape</code>.</li>
  <li><code class="language-plaintext highlighter-rouge">a ** b</code>: Returns the element-wise exponentiation of <code class="language-plaintext highlighter-rouge">a</code> to the power of <code class="language-plaintext highlighter-rouge">b</code>. Requires the two arrays to have the same <code class="language-plaintext highlighter-rouge">shape</code>.</li>
  <li><code class="language-plaintext highlighter-rouge">np.exp(a)</code>: Returns the element-wise result of $e^a$.</li>
  <li><code class="language-plaintext highlighter-rouge">np.sin(a), np.cos(a), np.tan(a), np.log(a)</code>: Returns the corresponding element-wise operation applied to <code class="language-plaintext highlighter-rouge">a</code>.</li>
</ul>

<p>Other than element-wise operations, important operators widely used in NLA are the matrix-by-vector product, the matrix-by-matrix product and the inner product between vectors. Since those operations are mathematically similar, numpy implements them in the same way:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">a @ b</code>: Returns the matrix-by-matrix product between <code class="language-plaintext highlighter-rouge">a</code> and <code class="language-plaintext highlighter-rouge">b</code>. It requires the shapes of <code class="language-plaintext highlighter-rouge">a</code> and <code class="language-plaintext highlighter-rouge">b</code> to be compatible, e.g. shape of <code class="language-plaintext highlighter-rouge">a</code> $(m, n)$, shape of <code class="language-plaintext highlighter-rouge">b</code> $(n, k)$. The shape of the result is $(m, k)$.</li>
</ul>

<p>Clearly, when either <code class="language-plaintext highlighter-rouge">a</code> or <code class="language-plaintext highlighter-rouge">b</code> are vectors of the correct shape, then <code class="language-plaintext highlighter-rouge">@</code> returns the matrix-by-vector multiplication, while if both of them are vectors, then <code class="language-plaintext highlighter-rouge">a @ b</code> returns the inner product between the two vectors. The inner product can be equivalently written as <code class="language-plaintext highlighter-rouge">np.dot(a, b)</code>.</p>

<h3 id="example">Example</h3>
<p>To understand the basic operations between arrays, we will list an example code where we construct two vectors $x_1, x_2$ of the same dimension $n$ and a matrix $A$ of shape $n \times n$. Then, we compute $y_i = A x_i$ for $i = 1, 2$. Finally, we check that $y_1 + y_2 = A(x_1 + x_2)$ i.e. we check the linearity of $A$.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import numpy as np

# Dimension of the problem
n = 10

# Create the vectors
x1 = np.linspace(0, 1, n)
x2 = np.random.randn(n)

# Create the matrix
A = np.random.randn(n, n)

# Compute y1 and y2
y1 = A @ x1
y2 = A @ x2

# Compute y = A(x1 + x2)
y = A @ (x1 + x2)

# Check the equality
print(y)
print(y1 + y2)
</code></pre></div></div>

<blockquote>
  <p><strong><em>Exercise:</em></strong> Create two vectors $x_1$ and $x_2$ of dimension $n$ and check that 
\(e^{x_1} e^{x_2} = e^{x_1 + x_2}\)</p>
</blockquote>

<py-repl></py-repl>

<hr />
<h2 id="logic-operations-between-vectors">Logic operations between vectors</h2>
<p>Clearly, it is also possible to define element-wise logical operations between arrays. The results will always be a boolean array of the same dimension of the input arrays, where the logic is applied element by element. Here we report a table of the main logic operations:</p>

<table>
  <thead>
    <tr>
      <th>Operator</th>
      <th>Meaning</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>==</td>
      <td>EQUAL</td>
    </tr>
    <tr>
      <td>!=</td>
      <td>NOT EQUAL</td>
    </tr>
    <tr>
      <td>&gt;, &gt;=</td>
      <td>GREATER THAN</td>
    </tr>
    <tr>
      <td>&lt;, &lt;=</td>
      <td>LOWER THAN</td>
    </tr>
    <tr>
      <td>&amp;&amp;</td>
      <td>AND</td>
    </tr>
    <tr>
      <td>||</td>
      <td>OR</td>
    </tr>
    <tr>
      <td>!</td>
      <td>NOT</td>
    </tr>
  </tbody>
</table>

<p><br /></p>
<py-repl></py-repl>

<hr />
<h2 id="slicing">Slicing</h2>
<p>An important operation we will often use in practice, is the so-called <em>slicing</em>. Slicing is extracting a portion of an array, indexed by a given index array. For example, consider</p>

\[v = [0, 1, -1, 2, 1, -1]^T\]

<p>and assume we want to extract the first three elements of $v$ and assign them to a new vector $w$. This can be easily done by</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Create the array
v = np.array([0, 1, -1, 2, 1, -1])

# Slicing
w = v[0:3]
</code></pre></div></div>

<p>The notation <code class="language-plaintext highlighter-rouge">v[start:end]</code> returns the elements of <code class="language-plaintext highlighter-rouge">v</code> from <code class="language-plaintext highlighter-rouge">start</code> to <code class="language-plaintext highlighter-rouge">end-1</code>. When <code class="language-plaintext highlighter-rouge">start</code>=0 as in the example above, it can be emitted (e.g. <code class="language-plaintext highlighter-rouge">v[0:3]</code> is equivalent to <code class="language-plaintext highlighter-rouge">v[:3]</code>).</p>

<p>Slicing can also be performing by passing a numpy array of indices inside of the square brackets. For example, assume we want to extract the elements in even position of <code class="language-plaintext highlighter-rouge">v</code>. Then</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Create the array
v = np.array([0, 1, -1, 2, 1, -1])

# Slicing
idx = np.arange(0, len(v), 2)
w = v[idx]
</code></pre></div></div>

<p>does the job.</p>

<p>Finally, we can also slice by using boolean arrays. When this is the case, the elements in the position of the <code class="language-plaintext highlighter-rouge">True</code> values are returned. For example</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Create arrays
v = np.array([0, 1, -1, 2, 1, -1])
w = np.array([0, 0, -1, 1, 2, -1])

# Slicing
t = v[v == w]
</code></pre></div></div>

<p>is how we extract the elements that <code class="language-plaintext highlighter-rouge">v</code> and <code class="language-plaintext highlighter-rouge">w</code> have in common.</p>

<h3 id="slicing-matrices">Slicing matrices</h3>
<p>Slicing matrices works the same way as slicing vectors. The sole difference is that we need to use a 2-dimensional indexing array. For example, if</p>

\[A = \begin{bmatrix} 1 &amp; 2 &amp; 3 \\ 4 &amp; 5 &amp; 6 \\ 7 &amp; 8 &amp; 9 \end{bmatrix}\]

<p>and we want to extract the $2 \times 2$ principal submatrix of $A$ (that is, the left upper-most $2 \times 2$ submatrix of $A$), then we can do</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Create the matrix
A = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])

# Slicing
B = A[:2, :2]
</code></pre></div></div>

<blockquote>
  <p><strong><em>Exercise:</em></strong> Create an $n \times n$ matrix $A$ of normally distributed values. Then, create a second matrix $B$ with the same shape of $A$ such that it is equal to $A$ when $a_{i, j}$ is positive, while it is equal to $0$ when $a_{i, j} &lt; 0$.</p>
</blockquote>

<py-repl></py-repl>

<h2 id="going-on">Going on</h2>
<p>An application of Numpy will be on <a href="/jekyll/update/2022/09/16/linear_systems.html">Linear Systems</a>.</p>]]></content><author><name>Davide Evangelista</name></author><category term="jekyll" /><category term="update" /><category term="featured" /><summary type="html"><![CDATA[]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/numpy_logo.png" /><media:content medium="image" url="http://localhost:4000/assets/images/numpy_logo.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Introduction to Machine Learning</title><link href="http://localhost:4000/jekyll/update/2022/08/31/introduction.html" rel="alternate" type="text/html" title="Introduction to Machine Learning" /><published>2022-08-31T15:57:00+02:00</published><updated>2022-08-31T15:57:00+02:00</updated><id>http://localhost:4000/jekyll/update/2022/08/31/introduction</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2022/08/31/introduction.html"><![CDATA[<p><img src="/assets/article_images/2022-08-31-introduction/data_science.png" alt="" /></p>

<h2 id="what-is-data-science">What is Data Science?</h2>
<p>Today’s world is full of data. We tend to collect data for basically everything we do. In the last decades, computer scientists developed techniques to use the informations contained in the data, to develop algorithm able to solve complex tasks, usually reserved to humans and, for this reason, algorithms of those kind are referred to as <em>Intelligent</em>. The set of all the techniques interracting with data is called <strong>Data Science</strong>.</p>

<p>The diagram below visually represents the relationship between each of the component of Data Science, that is:</p>

<ul>
  <li>Data Minining;</li>
  <li>Big Data;</li>
  <li>Artifical Intelligence (AI);</li>
  <li>Machine Learning (ML);</li>
  <li>Deep Learning (DL);</li>
</ul>

<p>To start our journey in the world of neural networks, we first need to understand the meaning of all those terms.</p>

<p><img src="https://qph.fs.quoracdn.net/main-qimg-0434dc91cfe529790780b590da4d4f90" alt="" /></p>

<h3 id="data-mining">Data Mining</h3>
<p><em>Definition: Data Mining is defined as the set of all the techniques and algorithms useful to extract knowledge and informations from data.</em></p>

<p>Data Mining is usually performed via statistical methods, with the intent of understanding the correlation between the different <em>features</em>.
Usually, raw data cannot be used directly from Data Mining algorithms and need to be manually cleaned up by a user. This step is usually called <strong>Data Cleaning</strong>.</p>

<h3 id="big-data">Big Data</h3>]]></content><author><name>Davide Evangelista</name></author><category term="jekyll" /><category term="update" /><category term="featured" /><summary type="html"><![CDATA[]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/data_science.jpg" /><media:content medium="image" url="http://localhost:4000/assets/images/data_science.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>